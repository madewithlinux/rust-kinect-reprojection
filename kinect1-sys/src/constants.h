#pragma once
#include "forward_declarations.h"
#include "system_types.h"

// from NuiApi.h

#define NUI_INITIALIZE_FLAG_USES_AUDIO                  0x10000000
#define NUI_INITIALIZE_FLAG_USES_DEPTH_AND_PLAYER_INDEX 0x00000001
#define NUI_INITIALIZE_FLAG_USES_COLOR                  0x00000002
#define NUI_INITIALIZE_FLAG_USES_SKELETON               0x00000008
#define NUI_INITIALIZE_FLAG_USES_DEPTH                  0x00000020
#define NUI_INITIALIZE_FLAG_USES_HIGH_QUALITY_COLOR     0x00000040  // implies COLOR stream will be from uncompressed YUY2 @ 15fps

#define NUI_INITIALIZE_DEFAULT_HARDWARE_THREAD          0xFFFFFFFF


// from NuiSensor.h

#define	NUI_SKELETON_COUNT	( 6 )

#ifndef _Vector4_
#define _Vector4_
typedef struct _Vector4
    {
    FLOAT x;
    FLOAT y;
    FLOAT z;
    FLOAT w;
    } 	Vector4;

#endif _Vector4_
#ifndef _Matrix4_
#define _Matrix4_
typedef struct _Matrix4
    {
    FLOAT M11;
    FLOAT M12;
    FLOAT M13;
    FLOAT M14;
    FLOAT M21;
    FLOAT M22;
    FLOAT M23;
    FLOAT M24;
    FLOAT M31;
    FLOAT M32;
    FLOAT M33;
    FLOAT M34;
    FLOAT M41;
    FLOAT M42;
    FLOAT M43;
    FLOAT M44;
    } 	Matrix4;

#endif _Matrix4_

#ifdef __XNAMATH_H__

#ifndef _Vector4_Functions_
#define _Vector4_Functions_

inline XMVECTOR XMVectorFromVector4(const Vector4& vec4)
{
    return XMVectorSet(vec4.x, vec4.y, vec4.z, vec4.w);
}

inline Vector4 XMVectorToVector4(FXMVECTOR V)
{
    Vector4 vec4 = { XMVectorGetX(V), XMVectorGetY(V), XMVectorGetZ(V), XMVectorGetW(V) };
    return vec4;
}

#endif _Vector4_Functions_

#endif // __XNAMATH_H__

#ifndef _NUI_SKELETON_POSITION_INDEX_
#define _NUI_SKELETON_POSITION_INDEX_
typedef
enum _NUI_SKELETON_POSITION_INDEX
    {	NUI_SKELETON_POSITION_HIP_CENTER	= 0,
	NUI_SKELETON_POSITION_SPINE	= ( NUI_SKELETON_POSITION_HIP_CENTER + 1 ) ,
	NUI_SKELETON_POSITION_SHOULDER_CENTER	= ( NUI_SKELETON_POSITION_SPINE + 1 ) ,
	NUI_SKELETON_POSITION_HEAD	= ( NUI_SKELETON_POSITION_SHOULDER_CENTER + 1 ) ,
	NUI_SKELETON_POSITION_SHOULDER_LEFT	= ( NUI_SKELETON_POSITION_HEAD + 1 ) ,
	NUI_SKELETON_POSITION_ELBOW_LEFT	= ( NUI_SKELETON_POSITION_SHOULDER_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_WRIST_LEFT	= ( NUI_SKELETON_POSITION_ELBOW_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_HAND_LEFT	= ( NUI_SKELETON_POSITION_WRIST_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_SHOULDER_RIGHT	= ( NUI_SKELETON_POSITION_HAND_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_ELBOW_RIGHT	= ( NUI_SKELETON_POSITION_SHOULDER_RIGHT + 1 ) ,
	NUI_SKELETON_POSITION_WRIST_RIGHT	= ( NUI_SKELETON_POSITION_ELBOW_RIGHT + 1 ) ,
	NUI_SKELETON_POSITION_HAND_RIGHT	= ( NUI_SKELETON_POSITION_WRIST_RIGHT + 1 ) ,
	NUI_SKELETON_POSITION_HIP_LEFT	= ( NUI_SKELETON_POSITION_HAND_RIGHT + 1 ) ,
	NUI_SKELETON_POSITION_KNEE_LEFT	= ( NUI_SKELETON_POSITION_HIP_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_ANKLE_LEFT	= ( NUI_SKELETON_POSITION_KNEE_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_FOOT_LEFT	= ( NUI_SKELETON_POSITION_ANKLE_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_HIP_RIGHT	= ( NUI_SKELETON_POSITION_FOOT_LEFT + 1 ) ,
	NUI_SKELETON_POSITION_KNEE_RIGHT	= ( NUI_SKELETON_POSITION_HIP_RIGHT + 1 ) ,
	NUI_SKELETON_POSITION_ANKLE_RIGHT	= ( NUI_SKELETON_POSITION_KNEE_RIGHT + 1 ) ,
	NUI_SKELETON_POSITION_FOOT_RIGHT	= ( NUI_SKELETON_POSITION_ANKLE_RIGHT + 1 ) ,
	NUI_SKELETON_POSITION_COUNT	= ( NUI_SKELETON_POSITION_FOOT_RIGHT + 1 )
    } 	NUI_SKELETON_POSITION_INDEX;

#endif _NUI_SKELETON_POSITION_INDEX_
#ifndef _NUI_IMAGE_TYPE_
#define _NUI_IMAGE_TYPE_
typedef
enum _NUI_IMAGE_TYPE
    {	NUI_IMAGE_TYPE_DEPTH_AND_PLAYER_INDEX	= 0,
	NUI_IMAGE_TYPE_COLOR	= ( NUI_IMAGE_TYPE_DEPTH_AND_PLAYER_INDEX + 1 ) ,
	NUI_IMAGE_TYPE_COLOR_YUV	= ( NUI_IMAGE_TYPE_COLOR + 1 ) ,
	NUI_IMAGE_TYPE_COLOR_RAW_YUV	= ( NUI_IMAGE_TYPE_COLOR_YUV + 1 ) ,
	NUI_IMAGE_TYPE_DEPTH	= ( NUI_IMAGE_TYPE_COLOR_RAW_YUV + 1 ) ,
	NUI_IMAGE_TYPE_COLOR_INFRARED	= ( NUI_IMAGE_TYPE_DEPTH + 1 ) ,
	NUI_IMAGE_TYPE_COLOR_RAW_BAYER	= ( NUI_IMAGE_TYPE_COLOR_INFRARED + 1 )
    } 	NUI_IMAGE_TYPE;

#endif _NUI_IMAGE_TYPE_
#ifndef _NUI_IMAGE_RESOLUTION_
#define _NUI_IMAGE_RESOLUTION_
typedef
enum _NUI_IMAGE_RESOLUTION
    {	NUI_IMAGE_RESOLUTION_INVALID	= -1,
	NUI_IMAGE_RESOLUTION_80x60	= 0,
	NUI_IMAGE_RESOLUTION_320x240	= ( NUI_IMAGE_RESOLUTION_80x60 + 1 ) ,
	NUI_IMAGE_RESOLUTION_640x480	= ( NUI_IMAGE_RESOLUTION_320x240 + 1 ) ,
	NUI_IMAGE_RESOLUTION_1280x960	= ( NUI_IMAGE_RESOLUTION_640x480 + 1 )
    } 	NUI_IMAGE_RESOLUTION;

#endif _NUI_IMAGE_RESOLUTION_
#ifndef _NUI_BACKLIGHT_COMPENSATION_MODE_
#define _NUI_BACKLIGHT_COMPENSATION_MODE_
typedef
enum _NUI_BACKLIGHT_COMPENSATION_MODE
    {	NUI_BACKLIGHT_COMPENSATION_MODE_AVERAGE_BRIGHTNESS	= 0,
	NUI_BACKLIGHT_COMPENSATION_MODE_CENTER_PRIORITY	= 1,
	NUI_BACKLIGHT_COMPENSATION_MODE_LOWLIGHTS_PRIORITY	= 2,
	NUI_BACKLIGHT_COMPENSATION_MODE_CENTER_ONLY	= 4
    } 	NUI_BACKLIGHT_COMPENSATION_MODE;

#endif _NUI_BACKLIGHT_COMPENSATION_MODE_
#ifndef _NUI_POWER_LINE_FREQUENCY_
#define _NUI_POWER_LINE_FREQUENCY_
typedef
enum _NUI_POWER_LINE_FREQUENCY
    {	NUI_POWER_LINE_FREQUENCY_DISABLED	= 0,
	NUI_POWER_LINE_FREQUENCY_50HZ	= 1,
	NUI_POWER_LINE_FREQUENCY_60HZ	= 2
    } 	NUI_POWER_LINE_FREQUENCY;

#endif _NUI_POWER_LINE_FREQUENCY_
#ifndef _NUI_IMAGE_VIEW_AREA_
#define _NUI_IMAGE_VIEW_AREA_
typedef struct _NUI_IMAGE_VIEW_AREA
    {
    int eDigitalZoom;
    LONG lCenterX;
    LONG lCenterY;
    } 	NUI_IMAGE_VIEW_AREA;

#endif _NUI_IMAGE_VIEW_AREA_
#ifndef _NUI_TRANSFORM_SMOOTH_PARAMETERS_
#define _NUI_TRANSFORM_SMOOTH_PARAMETERS_
typedef struct _NUI_TRANSFORM_SMOOTH_PARAMETERS
    {
    FLOAT fSmoothing;
    FLOAT fCorrection;
    FLOAT fPrediction;
    FLOAT fJitterRadius;
    FLOAT fMaxDeviationRadius;
    } 	NUI_TRANSFORM_SMOOTH_PARAMETERS;

#endif _NUI_TRANSFORM_SMOOTH_PARAMETERS_
#ifndef _NUI_SURFACE_DESC_
#define _NUI_SURFACE_DESC_
typedef struct _NUI_SURFACE_DESC
    {
    UINT Width;
    UINT Height;
    } 	NUI_SURFACE_DESC;

#endif _NUI_SURFACE_DESC_
#ifndef _NUI_SKELETON_POSITION_TRACKING_STATE_
#define _NUI_SKELETON_POSITION_TRACKING_STATE_
typedef
enum _NUI_SKELETON_POSITION_TRACKING_STATE
    {	NUI_SKELETON_POSITION_NOT_TRACKED	= 0,
	NUI_SKELETON_POSITION_INFERRED	= ( NUI_SKELETON_POSITION_NOT_TRACKED + 1 ) ,
	NUI_SKELETON_POSITION_TRACKED	= ( NUI_SKELETON_POSITION_INFERRED + 1 )
    } 	NUI_SKELETON_POSITION_TRACKING_STATE;

#endif _NUI_SKELETON_POSITION_TRACKING_STATE_
#ifndef _NUI_SKELETON_TRACKING_STATE_
#define _NUI_SKELETON_TRACKING_STATE_
typedef
enum _NUI_SKELETON_TRACKING_STATE
    {	NUI_SKELETON_NOT_TRACKED	= 0,
	NUI_SKELETON_POSITION_ONLY	= ( NUI_SKELETON_NOT_TRACKED + 1 ) ,
	NUI_SKELETON_TRACKED	= ( NUI_SKELETON_POSITION_ONLY + 1 )
    } 	NUI_SKELETON_TRACKING_STATE;

#endif _NUI_SKELETON_TRACKING_STATE_
#ifndef _NUI_SKELETON_DATA_
#define _NUI_SKELETON_DATA_
typedef struct _NUI_SKELETON_DATA
    {
    NUI_SKELETON_TRACKING_STATE eTrackingState;
    DWORD dwTrackingID;
    DWORD dwEnrollmentIndex;
    DWORD dwUserIndex;
    Vector4 Position;
    Vector4 SkeletonPositions[ 20 ];
    NUI_SKELETON_POSITION_TRACKING_STATE eSkeletonPositionTrackingState[ 20 ];
    DWORD dwQualityFlags;
    } 	NUI_SKELETON_DATA;

#endif _NUI_SKELETON_TRACKING_STATE_
#ifndef _NUI_SKELETON_FRAME_
#define _NUI_SKELETON_FRAME_

#pragma pack(push, 16)
typedef struct _NUI_SKELETON_FRAME
    {
    LARGE_INTEGER liTimeStamp;
    DWORD dwFrameNumber;
    DWORD dwFlags;
    Vector4 vFloorClipPlane;
    Vector4 vNormalToGravity;
    NUI_SKELETON_DATA SkeletonData[ 6 ];
    } 	NUI_SKELETON_FRAME;


#pragma pack(pop)
#endif _NUI_SKELETON_FRAME_
#ifndef _NUI_SKELETON_BONE_ROTATION_
#define _NUI_SKELETON_BONE_ROTATION_
typedef struct _NUI_SKELETON_BONE_ROTATION
    {
    Matrix4 rotationMatrix;
    Vector4 rotationQuaternion;
    } 	NUI_SKELETON_BONE_ROTATION;

#endif _NUI_SKELETON_BONE_ROTATION_
#ifndef _NUI_SKELETON_BONE_ORIENTATION_
#define _NUI_SKELETON_BONE_ORIENTATION_
typedef struct _NUI_SKELETON_BONE_ORIENTATION
    {
    NUI_SKELETON_POSITION_INDEX endJoint;
    NUI_SKELETON_POSITION_INDEX startJoint;
    NUI_SKELETON_BONE_ROTATION hierarchicalRotation;
    NUI_SKELETON_BONE_ROTATION absoluteRotation;
    } 	NUI_SKELETON_BONE_ORIENTATION;

#endif _NUI_SKELETON_BONE_ORIENTATION_
#ifndef _NUI_LOCKED_RECT_
#define _NUI_LOCKED_RECT_
#ifdef _MIDL_OUTPUT_
typedef struct _NUI_LOCKED_RECT
    {
    INT Pitch;
    INT size;
    void *pBits;
    } 	NUI_LOCKED_RECT;

#else
typedef struct _NUI_LOCKED_RECT
{
    INT                         Pitch;
    INT                         size;

} NUI_LOCKED_RECT;
#endif _MIDL_OUTPUT_
#endif _NUI_LOCKED_RECT_
#ifndef _NUI_DEPTH_IMAGE_POINT_
#define _NUI_DEPTH_IMAGE_POINT_
typedef struct _NUI_DEPTH_IMAGE_POINT
    {
    LONG x;
    LONG y;
    LONG depth;
    LONG reserved;
    } 	NUI_DEPTH_IMAGE_POINT;

#endif _NUI_DEPTH_IMAGE_POINT_
#ifndef _NUI_COLOR_IMAGE_POINT_
#define _NUI_COLOR_IMAGE_POINT_
typedef struct _NUI_COLOR_IMAGE_POINT
    {
    LONG x;
    LONG y;
    } 	NUI_COLOR_IMAGE_POINT;

#endif _NUI_COLOR_IMAGE_POINT_
#define MICARRAY_ADAPTIVE_BEAM 0x1100




/* [helpstring][version][uuid] */

#ifndef _NUI_IMAGE_FRAME_
#define _NUI_IMAGE_FRAME_
typedef struct _NUI_IMAGE_FRAME
    {
    LARGE_INTEGER liTimeStamp;
    DWORD dwFrameNumber;
    NUI_IMAGE_TYPE eImageType;
    NUI_IMAGE_RESOLUTION eResolution;
    INuiFrameTexture *pFrameTexture;
    DWORD dwFrameFlags;
    NUI_IMAGE_VIEW_AREA ViewArea;
    } 	NUI_IMAGE_FRAME;

#endif _NUI_IMAGE_FRAME_
#ifndef _NUI_DEPTH_IMAGE_PIXEL_
#define _NUI_DEPTH_IMAGE_PIXEL_
typedef struct _NUI_DEPTH_IMAGE_PIXEL
    {
    USHORT playerIndex;
    USHORT depth;
    } 	NUI_DEPTH_IMAGE_PIXEL;

#endif _NUI_DEPTH_IMAGE_PIXEL_

