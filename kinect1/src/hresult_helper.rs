use kinect1_sys::HRESULT;

const SEVERITY_SUCCESS: i32 = 0;
const SEVERITY_ERROR: i32 = 1;

pub const S_OK: HRESULT = 0;

const FACILITY_NUI: i32 = 0x301;

// #define E_NUI_DEVICE_NOT_CONNECTED  __HRESULT_FROM_WIN32(ERROR_DEVICE_NOT_CONNECTED)
// #define E_NUI_DEVICE_NOT_READY      __HRESULT_FROM_WIN32(ERROR_NOT_READY)
// #define E_NUI_ALREADY_INITIALIZED   __HRESULT_FROM_WIN32(ERROR_ALREADY_INITIALIZED)
// #define E_NUI_NO_MORE_ITEMS         __HRESULT_FROM_WIN32(ERROR_NO_MORE_ITEMS)
pub const S_NUI_INITIALIZING: HRESULT = (SEVERITY_SUCCESS << 31) | (FACILITY_NUI << 16) | 1;
pub const E_NUI_FRAME_NO_DATA: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 1;
pub const E_NUI_STREAM_NOT_ENABLED: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 2;
pub const E_NUI_IMAGE_STREAM_IN_USE: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 3;
pub const E_NUI_FRAME_LIMIT_EXCEEDED: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 4;
pub const E_NUI_FEATURE_NOT_INITIALIZED: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 5;
pub const E_NUI_NOTGENUINE: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 6;
pub const E_NUI_INSUFFICIENTBANDWIDTH: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 7;
pub const E_NUI_NOTSUPPORTED: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 8;
pub const E_NUI_DEVICE_IN_USE: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 9;
pub const E_NUI_DATABASE_NOT_FOUND: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 13;
pub const E_NUI_DATABASE_VERSION_MISMATCH: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 14;
pub const E_NUI_HARDWARE_FEATURE_UNAVAILABLE: HRESULT = (SEVERITY_ERROR << 31) | (FACILITY_NUI << 16) | 15;
// pub const E_NUI_NOTCONNECTED: HRESULT =                       ((SEVERITY_ERROR <<31) | (FACILITY_NUI<<16) | /* 20 */ ERROR_BAD_UNIT);
// pub const E_NUI_NOTREADY: HRESULT =                           ((SEVERITY_ERROR <<31) | (FACILITY_NUI<<16) | /* 21 */ ERROR_NOT_READY);
// pub const E_NUI_SKELETAL_ENGINE_BUSY: HRESULT =               ((SEVERITY_ERROR <<31) | (FACILITY_NUI<<16) | /* 170 */ ERROR_BUSY;
// pub const E_NUI_NOTPOWERED: HRESULT =                         ((SEVERITY_ERROR <<31) | (FACILITY_NUI<<16) | /* 639 */ ERROR_INSUFFICIENT_POWER);
// pub const E_NUI_BADINDEX: HRESULT =                           ((SEVERITY_ERROR <<31) | (FACILITY_NUI<<16) | /* 1413 */ ERROR_INVALID_INDEX);
// #define E_NUI_BADIINDEX                         E_NUI_BADINDEX // V 1.0 compatibility

pub fn try_get_nui_hresult_name(result: HRESULT) -> Option<String> {
    match result {
        S_NUI_INITIALIZING => Some("S_NUI_INITIALIZING".to_string()),
        E_NUI_FRAME_NO_DATA => Some("E_NUI_FRAME_NO_DATA".to_string()),
        E_NUI_STREAM_NOT_ENABLED => Some("E_NUI_STREAM_NOT_ENABLED".to_string()),
        E_NUI_IMAGE_STREAM_IN_USE => Some("E_NUI_IMAGE_STREAM_IN_USE".to_string()),
        E_NUI_FRAME_LIMIT_EXCEEDED => Some("E_NUI_FRAME_LIMIT_EXCEEDED".to_string()),
        E_NUI_FEATURE_NOT_INITIALIZED => Some("E_NUI_FEATURE_NOT_INITIALIZED".to_string()),
        E_NUI_NOTGENUINE => Some("E_NUI_NOTGENUINE".to_string()),
        E_NUI_INSUFFICIENTBANDWIDTH => Some("E_NUI_INSUFFICIENTBANDWIDTH".to_string()),
        E_NUI_NOTSUPPORTED => Some("E_NUI_NOTSUPPORTED".to_string()),
        E_NUI_DEVICE_IN_USE => Some("E_NUI_DEVICE_IN_USE".to_string()),
        E_NUI_DATABASE_NOT_FOUND => Some("E_NUI_DATABASE_NOT_FOUND".to_string()),
        E_NUI_DATABASE_VERSION_MISMATCH => Some("E_NUI_DATABASE_VERSION_MISMATCH".to_string()),
        E_NUI_HARDWARE_FEATURE_UNAVAILABLE => Some("E_NUI_HARDWARE_FEATURE_UNAVAILABLE".to_string()),
        _ => None,
    }
}
